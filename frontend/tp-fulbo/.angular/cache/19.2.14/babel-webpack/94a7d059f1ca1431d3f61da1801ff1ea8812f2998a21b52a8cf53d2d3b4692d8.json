{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { AuthService } from './auth.service';\nimport { ApiService } from './api.service';\ndescribe('AuthService', () => {\n  let service;\n  let httpMock;\n  let apiService;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [AuthService, ApiService]\n    });\n    service = TestBed.inject(AuthService);\n    httpMock = TestBed.inject(HttpTestingController);\n    apiService = TestBed.inject(ApiService);\n  });\n  afterEach(() => {\n    httpMock.verify(); // Verifica que no haya peticiones pendientes\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should perform login successfully', () => {\n    const mockCredentials = {\n      email: 'test@example.com',\n      password: 'password123'\n    };\n    const mockResponse = {\n      token: 'fake-jwt-token',\n      user: {\n        id: 1,\n        email: 'test@example.com'\n      }\n    };\n    service.login(mockCredentials).subscribe(response => {\n      expect(response).toEqual(mockResponse);\n      expect(response.token).toBe('fake-jwt-token');\n    });\n    const req = httpMock.expectOne('http://localhost:5088/api/auth/login');\n    expect(req.request.method).toBe('POST');\n    req.flush(mockResponse);\n  });\n  it('should handle logout correctly', () => {\n    // Simular que hay un token guardado\n    localStorage.setItem('token', 'fake-token');\n    expect(service.isAuthenticated()).toBeTruthy();\n    service.logout();\n    expect(service.isAuthenticated()).toBeFalsy();\n    expect(localStorage.getItem('token')).toBeNull();\n  });\n  it('should check authentication status correctly', () => {\n    // Inicialmente no debería estar autenticado\n    expect(service.isAuthenticated()).toBeFalsy();\n    // Después de guardar un token, debería estar autenticado\n    localStorage.setItem('token', 'fake-token');\n    expect(service.isAuthenticated()).toBeTruthy();\n    // Limpiar después de la prueba\n    localStorage.removeItem('token');\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","AuthService","ApiService","describe","service","httpMock","apiService","beforeEach","configureTestingModule","imports","providers","inject","afterEach","verify","it","expect","toBeTruthy","mockCredentials","email","password","mockResponse","token","user","id","login","subscribe","response","toEqual","toBe","req","expectOne","request","method","flush","localStorage","setItem","isAuthenticated","logout","toBeFalsy","getItem","toBeNull","removeItem"],"sources":["/Users/gs/Desktop/GS/DITELLA/ARQUITECTURA WEB/TP-Arquitectura-Web/frontend/tp-fulbo/src/app/services/auth.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { AuthService, LoginRequest, LoginResponse } from './auth.service';\nimport { ApiService } from './api.service';\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n  let httpMock: HttpTestingController;\n  let apiService: ApiService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [AuthService, ApiService]\n    });\n\n    service = TestBed.inject(AuthService);\n    httpMock = TestBed.inject(HttpTestingController);\n    apiService = TestBed.inject(ApiService);\n  });\n\n  afterEach(() => {\n    httpMock.verify(); // Verifica que no haya peticiones pendientes\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should perform login successfully', () => {\n    const mockCredentials: LoginRequest = {\n      email: 'test@example.com',\n      password: 'password123'\n    };\n\n    const mockResponse: LoginResponse = {\n      token: 'fake-jwt-token',\n      user: {\n        id: 1,\n        email: 'test@example.com'\n      }\n    };\n\n    service.login(mockCredentials).subscribe(response => {\n      expect(response).toEqual(mockResponse);\n      expect(response.token).toBe('fake-jwt-token');\n    });\n\n    const req = httpMock.expectOne('http://localhost:5088/api/auth/login');\n    expect(req.request.method).toBe('POST');\n    req.flush(mockResponse);\n  });\n\n  it('should handle logout correctly', () => {\n    // Simular que hay un token guardado\n    localStorage.setItem('token', 'fake-token');\n    expect(service.isAuthenticated()).toBeTruthy();\n\n    service.logout();\n    expect(service.isAuthenticated()).toBeFalsy();\n    expect(localStorage.getItem('token')).toBeNull();\n  });\n\n  it('should check authentication status correctly', () => {\n    // Inicialmente no debería estar autenticado\n    expect(service.isAuthenticated()).toBeFalsy();\n\n    // Después de guardar un token, debería estar autenticado\n    localStorage.setItem('token', 'fake-token');\n    expect(service.isAuthenticated()).toBeTruthy();\n\n    // Limpiar después de la prueba\n    localStorage.removeItem('token');\n  });\n}); "],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,WAAW,QAAqC,gBAAgB;AACzE,SAASC,UAAU,QAAQ,eAAe;AAE1CC,QAAQ,CAAC,aAAa,EAAE,MAAK;EAC3B,IAAIC,OAAoB;EACxB,IAAIC,QAA+B;EACnC,IAAIC,UAAsB;EAE1BC,UAAU,CAAC,MAAK;IACdT,OAAO,CAACU,sBAAsB,CAAC;MAC7BC,OAAO,EAAE,CAACV,uBAAuB,CAAC;MAClCW,SAAS,EAAE,CAACT,WAAW,EAAEC,UAAU;KACpC,CAAC;IAEFE,OAAO,GAAGN,OAAO,CAACa,MAAM,CAACV,WAAW,CAAC;IACrCI,QAAQ,GAAGP,OAAO,CAACa,MAAM,CAACX,qBAAqB,CAAC;IAChDM,UAAU,GAAGR,OAAO,CAACa,MAAM,CAACT,UAAU,CAAC;EACzC,CAAC,CAAC;EAEFU,SAAS,CAAC,MAAK;IACbP,QAAQ,CAACQ,MAAM,EAAE,CAAC,CAAC;EACrB,CAAC,CAAC;EAEFC,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACX,OAAO,CAAC,CAACY,UAAU,EAAE;EAC9B,CAAC,CAAC;EAEFF,EAAE,CAAC,mCAAmC,EAAE,MAAK;IAC3C,MAAMG,eAAe,GAAiB;MACpCC,KAAK,EAAE,kBAAkB;MACzBC,QAAQ,EAAE;KACX;IAED,MAAMC,YAAY,GAAkB;MAClCC,KAAK,EAAE,gBAAgB;MACvBC,IAAI,EAAE;QACJC,EAAE,EAAE,CAAC;QACLL,KAAK,EAAE;;KAEV;IAEDd,OAAO,CAACoB,KAAK,CAACP,eAAe,CAAC,CAACQ,SAAS,CAACC,QAAQ,IAAG;MAClDX,MAAM,CAACW,QAAQ,CAAC,CAACC,OAAO,CAACP,YAAY,CAAC;MACtCL,MAAM,CAACW,QAAQ,CAACL,KAAK,CAAC,CAACO,IAAI,CAAC,gBAAgB,CAAC;IAC/C,CAAC,CAAC;IAEF,MAAMC,GAAG,GAAGxB,QAAQ,CAACyB,SAAS,CAAC,sCAAsC,CAAC;IACtEf,MAAM,CAACc,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACJ,IAAI,CAAC,MAAM,CAAC;IACvCC,GAAG,CAACI,KAAK,CAACb,YAAY,CAAC;EACzB,CAAC,CAAC;EAEFN,EAAE,CAAC,gCAAgC,EAAE,MAAK;IACxC;IACAoB,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,YAAY,CAAC;IAC3CpB,MAAM,CAACX,OAAO,CAACgC,eAAe,EAAE,CAAC,CAACpB,UAAU,EAAE;IAE9CZ,OAAO,CAACiC,MAAM,EAAE;IAChBtB,MAAM,CAACX,OAAO,CAACgC,eAAe,EAAE,CAAC,CAACE,SAAS,EAAE;IAC7CvB,MAAM,CAACmB,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAE;EAClD,CAAC,CAAC;EAEF1B,EAAE,CAAC,8CAA8C,EAAE,MAAK;IACtD;IACAC,MAAM,CAACX,OAAO,CAACgC,eAAe,EAAE,CAAC,CAACE,SAAS,EAAE;IAE7C;IACAJ,YAAY,CAACC,OAAO,CAAC,OAAO,EAAE,YAAY,CAAC;IAC3CpB,MAAM,CAACX,OAAO,CAACgC,eAAe,EAAE,CAAC,CAACpB,UAAU,EAAE;IAE9C;IACAkB,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}