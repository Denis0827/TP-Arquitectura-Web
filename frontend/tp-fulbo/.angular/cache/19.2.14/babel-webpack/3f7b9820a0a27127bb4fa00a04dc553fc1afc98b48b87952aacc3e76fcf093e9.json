{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { UserService } from './user.service';\nimport { environment } from '../../../../environments/environment';\ndescribe('UserService', () => {\n  let service;\n  let httpMock;\n  const apiUrl = `${environment.apiUrl}/api/user`;\n  // Test data\n  const mockPlayerRequest = {\n    firstName: 'Juan',\n    lastName: 'Pérez',\n    email: 'juan@example.com',\n    position: 'Delantero',\n    number: 9,\n    password: 'password123'\n  };\n  const mockLoginRequest = {\n    email: 'juan@example.com',\n    password: 'password123'\n  };\n  const mockLoginResponse = {\n    token: 'fake-jwt-token',\n    userId: 1,\n    role: 'player'\n  };\n  const mockPlayerResponse = {\n    player: {\n      id: 1,\n      firstName: 'Juan',\n      lastName: 'Pérez',\n      email: 'juan@example.com',\n      position: 'Delantero',\n      number: 9\n    }\n  };\n  const mockCoachResponse = {\n    coach: {\n      id: 1,\n      firstName: 'Juan',\n      lastName: 'Pérez',\n      email: 'juan@example.com',\n      teamIds: [1, 2]\n    }\n  };\n  const mockPlayer = {\n    id: 1,\n    firstName: 'Juan',\n    lastName: 'Pérez',\n    email: 'juan@example.com',\n    position: 'Delantero',\n    number: 9\n  };\n  const mockCoach = {\n    id: 1,\n    firstName: 'Juan',\n    lastName: 'Pérez',\n    email: 'juan@example.com',\n    teamIds: [1, 2]\n  };\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [UserService]\n    });\n    service = TestBed.inject(UserService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify(); // Verifies that no requests are outstanding\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('registerPlayer', () => {\n    it('should register a player successfully', () => {\n      service.registerPlayer(mockPlayerRequest).subscribe(response => {\n        expect(response).toEqual(mockPlayerResponse);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/register`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockPlayerRequest);\n      req.flush(mockPlayerResponse);\n    });\n    it('should handle registration error', () => {\n      const errorMessage = 'Error al registrar jugador';\n      service.registerPlayer(mockPlayerRequest).subscribe({\n        error: error => {\n          expect(error.status).toBe(400);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/register`);\n      req.flush(errorMessage, {\n        status: 400,\n        statusText: 'Bad Request'\n      });\n    });\n  });\n  describe('login', () => {\n    it('should login successfully', () => {\n      service.login(mockLoginRequest).subscribe(response => {\n        expect(response).toEqual(mockLoginResponse);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/login`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockLoginRequest);\n      req.flush(mockLoginResponse);\n    });\n    it('should handle login error', () => {\n      const errorMessage = 'Credenciales inválidas';\n      service.login(mockLoginRequest).subscribe({\n        error: error => {\n          expect(error.status).toBe(401);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/login`);\n      req.flush(errorMessage, {\n        status: 401,\n        statusText: 'Unauthorized'\n      });\n    });\n  });\n  describe('createCoach', () => {\n    it('should create a coach successfully', () => {\n      const playerId = 1;\n      service.createCoach(playerId).subscribe(response => {\n        expect(response).toEqual(mockCoachResponse);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}/coach`);\n      expect(req.request.method).toBe('POST');\n      req.flush(mockCoachResponse);\n    });\n    it('should handle coach creation error', () => {\n      const playerId = 1;\n      const errorMessage = 'Error al crear coach';\n      service.createCoach(playerId).subscribe({\n        error: error => {\n          expect(error.status).toBe(400);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}/coach`);\n      req.flush(errorMessage, {\n        status: 400,\n        statusText: 'Bad Request'\n      });\n    });\n  });\n  describe('getAllCoaches', () => {\n    it('should get all coaches successfully', () => {\n      const mockCoaches = [mockCoach];\n      service.getAllCoaches().subscribe(coaches => {\n        expect(coaches).toEqual(mockCoaches);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/coaches`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockCoaches);\n    });\n    it('should handle get coaches error', () => {\n      const errorMessage = 'Error al obtener coaches';\n      service.getAllCoaches().subscribe({\n        error: error => {\n          expect(error.status).toBe(500);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/coaches`);\n      req.flush(errorMessage, {\n        status: 500,\n        statusText: 'Internal Server Error'\n      });\n    });\n  });\n  describe('getCoachById', () => {\n    it('should get a coach by id successfully', () => {\n      const coachId = 1;\n      service.getCoachById(coachId).subscribe(coach => {\n        expect(coach).toEqual(mockCoach);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/coaches/${coachId}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockCoach);\n    });\n    it('should handle get coach by id error', () => {\n      const coachId = 1;\n      const errorMessage = 'Coach no encontrado';\n      service.getCoachById(coachId).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/coaches/${coachId}`);\n      req.flush(errorMessage, {\n        status: 404,\n        statusText: 'Not Found'\n      });\n    });\n  });\n  describe('deleteCoach', () => {\n    it('should delete a coach successfully', () => {\n      const coachId = 1;\n      service.deleteCoach(coachId).subscribe(response => {\n        expect(response).toEqual(mockCoachResponse);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/coaches/${coachId}`);\n      expect(req.request.method).toBe('DELETE');\n      req.flush(mockCoachResponse);\n    });\n    it('should handle delete coach error', () => {\n      const coachId = 1;\n      const errorMessage = 'Error al eliminar coach';\n      service.deleteCoach(coachId).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/coaches/${coachId}`);\n      req.flush(errorMessage, {\n        status: 404,\n        statusText: 'Not Found'\n      });\n    });\n  });\n  describe('getAllPlayers', () => {\n    it('should get all players successfully', () => {\n      const mockPlayers = [mockPlayer];\n      service.getAllPlayers().subscribe(players => {\n        expect(players).toEqual(mockPlayers);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockPlayers);\n    });\n    it('should handle get players error', () => {\n      const errorMessage = 'Error al obtener jugadores';\n      service.getAllPlayers().subscribe({\n        error: error => {\n          expect(error.status).toBe(500);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players`);\n      req.flush(errorMessage, {\n        status: 500,\n        statusText: 'Internal Server Error'\n      });\n    });\n  });\n  describe('getPlayerById', () => {\n    it('should get a player by id successfully', () => {\n      const playerId = 1;\n      service.getPlayerById(playerId).subscribe(player => {\n        expect(player).toEqual(mockPlayer);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockPlayer);\n    });\n    it('should handle get player by id error', () => {\n      const playerId = 1;\n      const errorMessage = 'Jugador no encontrado';\n      service.getPlayerById(playerId).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}`);\n      req.flush(errorMessage, {\n        status: 404,\n        statusText: 'Not Found'\n      });\n    });\n  });\n  describe('deletePlayer', () => {\n    it('should delete a player successfully', () => {\n      const playerId = 1;\n      service.deletePlayer(playerId).subscribe(response => {\n        expect(response).toEqual(mockCoachResponse);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}`);\n      expect(req.request.method).toBe('DELETE');\n      req.flush(mockCoachResponse);\n    });\n    it('should handle delete player error', () => {\n      const playerId = 1;\n      const errorMessage = 'Error al eliminar jugador';\n      service.deletePlayer(playerId).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}`);\n      req.flush(errorMessage, {\n        status: 404,\n        statusText: 'Not Found'\n      });\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}