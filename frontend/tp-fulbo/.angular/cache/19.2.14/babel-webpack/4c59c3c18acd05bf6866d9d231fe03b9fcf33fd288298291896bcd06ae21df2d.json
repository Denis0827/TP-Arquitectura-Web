{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nlet AuthService = class AuthService {\n  apiService;\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  login(credentials) {\n    return this.apiService.post('/auth/login', credentials);\n  }\n  logout() {\n    // Implementar lógica de logout (limpiar token, etc)\n    localStorage.removeItem('token');\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static ctorParameters = () => [{\n    type: ApiService\n  }];\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":{"version":3,"names":["Injectable","ApiService","AuthService","apiService","constructor","login","credentials","post","logout","localStorage","removeItem","isAuthenticated","getItem","getToken","__decorate","providedIn"],"sources":["/Users/gs/Desktop/GS/DITELLA/ARQUITECTURA WEB/TP-Arquitectura-Web/frontend/tp-fulbo/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { Observable } from 'rxjs';\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface LoginResponse {\n  token: string;\n  user: {\n    id: number;\n    email: string;\n    // Agrega otros campos del usuario que necesites\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  constructor(private apiService: ApiService) {}\n\n  login(credentials: LoginRequest): Observable<LoginResponse> {\n    return this.apiService.post<LoginResponse>('/auth/login', credentials);\n  }\n\n  logout(): void {\n    // Implementar lógica de logout (limpiar token, etc)\n    localStorage.removeItem('token');\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n} "],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,eAAe;AAoBnC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EACFC,UAAA;EAApBC,YAAoBD,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7CE,KAAKA,CAACC,WAAyB;IAC7B,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CAAgB,aAAa,EAAED,WAAW,CAAC;EACxE;EAEAE,MAAMA,CAAA;IACJ;IACAC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,eAAeA,CAAA;IACb,OAAO,CAAC,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAC,QAAQA,CAAA;IACN,OAAOJ,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;;;;;AAlBWV,WAAW,GAAAY,UAAA,EAHvBd,UAAU,CAAC;EACVe,UAAU,EAAE;CACb,CAAC,C,EACWb,WAAW,CAmBvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}