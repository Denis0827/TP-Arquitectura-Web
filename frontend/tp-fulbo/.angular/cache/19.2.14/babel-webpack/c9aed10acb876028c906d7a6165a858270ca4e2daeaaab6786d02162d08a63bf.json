{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nlet UserService = class UserService {\n  http = inject(HttpClient);\n  apiUrl = `${environment.apiUrl}/api/user`;\n  constructor() {}\n  updateProfile(userId, data) {\n    return this.http.put(`${this.apiUrl}/${userId}`, data);\n  }\n  changePassword(userId, data) {\n    return this.http.post(`${this.apiUrl}/${userId}/change-password`, data);\n  }\n  getAllUsers() {\n    return this.http.get(this.apiUrl);\n  }\n  getUserById(userId) {\n    return this.http.get(`${this.apiUrl}/${userId}`);\n  }\n  updateUserRole(userId, role) {\n    return this.http.put(`${this.apiUrl}/${userId}/role`, {\n      role\n    });\n  }\n  // Registro de jugador\n  registerPlayer(request) {\n    return this.http.post(`${this.apiUrl}/register`, request);\n  }\n  // Login\n  login(request) {\n    return this.http.post(`${this.apiUrl}/login`, request);\n  }\n  // Convertir jugador a coach\n  createCoach(playerId) {\n    return this.http.post(`${this.apiUrl}/players/${playerId}/coach`, {});\n  }\n  // Obtener todos los coaches\n  getAllCoaches() {\n    return this.http.get(`${this.apiUrl}/coaches`);\n  }\n  // Obtener coach por ID\n  getCoachById(idCoach) {\n    return this.http.get(`${this.apiUrl}/coaches/${idCoach}`);\n  }\n  // Eliminar coach\n  deleteCoach(idCoach) {\n    return this.http.delete(`${this.apiUrl}/coaches/${idCoach}`);\n  }\n  // Obtener todos los jugadores\n  getAllPlayers() {\n    return this.http.get(`${this.apiUrl}/players`);\n  }\n  // Obtener jugador por ID\n  getPlayerById(idPlayer) {\n    return this.http.get(`${this.apiUrl}/players/${idPlayer}`);\n  }\n  // Eliminar jugador\n  deletePlayer(idPlayer) {\n    return this.http.delete(`${this.apiUrl}/players/${idPlayer}`);\n  }\n  static ctorParameters = () => [];\n};\nUserService = __decorate([Injectable({\n  providedIn: 'root'\n})], UserService);\nexport { UserService };","map":{"version":3,"names":["Injectable","inject","HttpClient","environment","UserService","http","apiUrl","constructor","updateProfile","userId","data","put","changePassword","post","getAllUsers","get","getUserById","updateUserRole","role","registerPlayer","request","login","createCoach","playerId","getAllCoaches","getCoachById","idCoach","deleteCoach","delete","getAllPlayers","getPlayerById","idPlayer","deletePlayer","__decorate","providedIn"],"sources":["/Users/gs/Desktop/GS/DITELLA/ARQUITECTURA WEB/TP-Arquitectura-Web/frontend/tp-fulbo/src/app/features/users/services/user.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\n\n// Import models\nimport { Player, Coach } from '../../../models/user.model';\nimport { PlayerRequest, LoginRequest } from '../../../models/requests/player.request';\nimport { LoginResponse, PlayerResponse, CoachResponse } from '../../../models/responses/login.response';\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\nexport interface UpdateUserRequest {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n}\n\nexport interface ChangePasswordRequest {\n  currentPassword: string;\n  newPassword: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private http = inject(HttpClient);\n  private apiUrl = `${environment.apiUrl}/api/user`;\n\n  constructor() {}\n\n\n  updateProfile(userId: number, data: UpdateUserRequest): Observable<User> {\n    return this.http.put<User>(`${this.apiUrl}/${userId}`, data);\n  }\n\n  changePassword(userId: number, data: ChangePasswordRequest): Observable<void> {\n    return this.http.post<void>(`${this.apiUrl}/${userId}/change-password`, data);\n  }\n\n  getAllUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.apiUrl);\n  }\n\n  getUserById(userId: number): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/${userId}`);\n  }\n\n  updateUserRole(userId: number, role: string): Observable<User> {\n    return this.http.put<User>(`${this.apiUrl}/${userId}/role`, { role });\n  }\n\n  // Registro de jugador\n  registerPlayer(request: PlayerRequest): Observable<PlayerResponse> {\n    return this.http.post<PlayerResponse>(`${this.apiUrl}/register`, request);\n  }\n\n  // Login\n  login(request: LoginRequest): Observable<LoginResponse> {\n    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, request);\n  }\n\n  // Convertir jugador a coach\n  createCoach(playerId: number): Observable<CoachResponse> {\n    return this.http.post<CoachResponse>(`${this.apiUrl}/players/${playerId}/coach`, {});\n  }\n\n  // Obtener todos los coaches\n  getAllCoaches(): Observable<Coach[]> {\n    return this.http.get<Coach[]>(`${this.apiUrl}/coaches`);\n  }\n\n  // Obtener coach por ID\n  getCoachById(idCoach: number): Observable<Coach> {\n    return this.http.get<Coach>(`${this.apiUrl}/coaches/${idCoach}`);\n  }\n\n  // Eliminar coach\n  deleteCoach(idCoach: number): Observable<CoachResponse> {\n    return this.http.delete<CoachResponse>(`${this.apiUrl}/coaches/${idCoach}`);\n  }\n\n  // Obtener todos los jugadores\n  getAllPlayers(): Observable<Player[]> {\n    return this.http.get<Player[]>(`${this.apiUrl}/players`);\n  }\n\n  // Obtener jugador por ID\n  getPlayerById(idPlayer: number): Observable<Player> {\n    return this.http.get<Player>(`${this.apiUrl}/players/${idPlayer}`);\n  }\n\n  // Eliminar jugador\n  deletePlayer(idPlayer: number): Observable<CoachResponse> {\n    return this.http.delete<CoachResponse>(`${this.apiUrl}/players/${idPlayer}`);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}