{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nlet ConfirmDateService = class ConfirmDateService {\n  http = inject(HttpClient);\n  apiUrl = `${environment.apiUrl}/confirm-dates`;\n  constructor() {}\n  getAllConfirmations() {\n    return this.http.get(this.apiUrl);\n  }\n  getConfirmationById(confirmationId) {\n    return this.http.get(`${this.apiUrl}/${confirmationId}`);\n  }\n  getTeamConfirmations(teamId) {\n    return this.http.get(`${this.apiUrl}/team/${teamId}`);\n  }\n  getMatchConfirmations(matchId) {\n    return this.http.get(`${this.apiUrl}/match/${matchId}`);\n  }\n  createConfirmation(confirmation) {\n    return this.http.post(this.apiUrl, confirmation);\n  }\n  updateConfirmation(confirmationId, confirmation) {\n    return this.http.put(`${this.apiUrl}/${confirmationId}`, confirmation);\n  }\n  confirmDate(confirmationId, notes) {\n    return this.http.put(`${this.apiUrl}/${confirmationId}/confirm`, {\n      notes\n    });\n  }\n  rejectDate(confirmationId, notes) {\n    return this.http.put(`${this.apiUrl}/${confirmationId}/reject`, {\n      notes\n    });\n  }\n  static ctorParameters = () => [];\n};\nConfirmDateService = __decorate([Injectable({\n  providedIn: 'root'\n})], ConfirmDateService);\nexport { ConfirmDateService };","map":{"version":3,"names":["Injectable","inject","HttpClient","environment","ConfirmDateService","http","apiUrl","constructor","getAllConfirmations","get","getConfirmationById","confirmationId","getTeamConfirmations","teamId","getMatchConfirmations","matchId","createConfirmation","confirmation","post","updateConfirmation","put","confirmDate","notes","rejectDate","__decorate","providedIn"],"sources":["/Users/gs/Desktop/GS/DITELLA/ARQUITECTURA WEB/TP-Arquitectura-Web/frontend/tp-fulbo/src/app/features/dates/services/confirm-date.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\nexport interface DateConfirmation {\n  id: number;\n  matchId: number;\n  teamId: number;\n  status: 'PENDING' | 'CONFIRMED' | 'REJECTED';\n  responseDate?: string;\n  notes?: string;\n}\n\nexport interface CreateDateConfirmationRequest {\n  matchId: number;\n  teamId: number;\n  notes?: string;\n}\n\nexport interface UpdateDateConfirmationRequest {\n  status: DateConfirmation['status'];\n  notes?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmDateService {\n  private http = inject(HttpClient);\n  private apiUrl = `${environment.apiUrl}/confirm-dates`;\n\n  constructor() {}\n\n  getAllConfirmations(): Observable<DateConfirmation[]> {\n    return this.http.get<DateConfirmation[]>(this.apiUrl);\n  }\n\n  getConfirmationById(confirmationId: number): Observable<DateConfirmation> {\n    return this.http.get<DateConfirmation>(`${this.apiUrl}/${confirmationId}`);\n  }\n\n  getTeamConfirmations(teamId: number): Observable<DateConfirmation[]> {\n    return this.http.get<DateConfirmation[]>(`${this.apiUrl}/team/${teamId}`);\n  }\n\n  getMatchConfirmations(matchId: number): Observable<DateConfirmation[]> {\n    return this.http.get<DateConfirmation[]>(`${this.apiUrl}/match/${matchId}`);\n  }\n\n  createConfirmation(confirmation: CreateDateConfirmationRequest): Observable<DateConfirmation> {\n    return this.http.post<DateConfirmation>(this.apiUrl, confirmation);\n  }\n\n  updateConfirmation(confirmationId: number, confirmation: UpdateDateConfirmationRequest): Observable<DateConfirmation> {\n    return this.http.put<DateConfirmation>(`${this.apiUrl}/${confirmationId}`, confirmation);\n  }\n\n  confirmDate(confirmationId: number, notes?: string): Observable<DateConfirmation> {\n    return this.http.put<DateConfirmation>(`${this.apiUrl}/${confirmationId}/confirm`, { notes });\n  }\n\n  rejectDate(confirmationId: number, notes?: string): Observable<DateConfirmation> {\n    return this.http.put<DateConfirmation>(`${this.apiUrl}/${confirmationId}/reject`, { notes });\n  }\n} "],"mappings":";AAAA,SAASA,UAAU,EAAEC,MAAM,QAAQ,eAAe;AAClD,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,SAASC,WAAW,QAAQ,mCAAmC;AAyBxD,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EACrBC,IAAI,GAAGJ,MAAM,CAACC,UAAU,CAAC;EACzBI,MAAM,GAAG,GAAGH,WAAW,CAACG,MAAM,gBAAgB;EAEtDC,YAAA,GAAe;EAEfC,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAqB,IAAI,CAACH,MAAM,CAAC;EACvD;EAEAI,mBAAmBA,CAACC,cAAsB;IACxC,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAmB,GAAG,IAAI,CAACH,MAAM,IAAIK,cAAc,EAAE,CAAC;EAC5E;EAEAC,oBAAoBA,CAACC,MAAc;IACjC,OAAO,IAAI,CAACR,IAAI,CAACI,GAAG,CAAqB,GAAG,IAAI,CAACH,MAAM,SAASO,MAAM,EAAE,CAAC;EAC3E;EAEAC,qBAAqBA,CAACC,OAAe;IACnC,OAAO,IAAI,CAACV,IAAI,CAACI,GAAG,CAAqB,GAAG,IAAI,CAACH,MAAM,UAAUS,OAAO,EAAE,CAAC;EAC7E;EAEAC,kBAAkBA,CAACC,YAA2C;IAC5D,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAmB,IAAI,CAACZ,MAAM,EAAEW,YAAY,CAAC;EACpE;EAEAE,kBAAkBA,CAACR,cAAsB,EAAEM,YAA2C;IACpF,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAmB,GAAG,IAAI,CAACd,MAAM,IAAIK,cAAc,EAAE,EAAEM,YAAY,CAAC;EAC1F;EAEAI,WAAWA,CAACV,cAAsB,EAAEW,KAAc;IAChD,OAAO,IAAI,CAACjB,IAAI,CAACe,GAAG,CAAmB,GAAG,IAAI,CAACd,MAAM,IAAIK,cAAc,UAAU,EAAE;MAAEW;IAAK,CAAE,CAAC;EAC/F;EAEAC,UAAUA,CAACZ,cAAsB,EAAEW,KAAc;IAC/C,OAAO,IAAI,CAACjB,IAAI,CAACe,GAAG,CAAmB,GAAG,IAAI,CAACd,MAAM,IAAIK,cAAc,SAAS,EAAE;MAAEW;IAAK,CAAE,CAAC;EAC9F;;;AApCWlB,kBAAkB,GAAAoB,UAAA,EAH9BxB,UAAU,CAAC;EACVyB,UAAU,EAAE;CACb,CAAC,C,EACWrB,kBAAkB,CAqC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}