{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { ConfirmDateService } from './confirm-date.service';\nimport { environment } from '../../../../environments/environment';\ndescribe('ConfirmDateService', () => {\n  let service;\n  let httpMock;\n  const mockDate = {\n    idDate: 1,\n    idMatch: 1,\n    idTeam: 1,\n    status: 'PENDING',\n    responseDate: '2024-03-20T10:00:00',\n    notes: 'Test date confirmation'\n  };\n  const mockCreateDateRequest = {\n    idMatch: 1,\n    idTeam: 1,\n    notes: 'New date confirmation'\n  };\n  const mockDateResponse = {\n    message: 'Date confirmation created successfully',\n    dateId: 1\n  };\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [ConfirmDateService]\n    });\n    service = TestBed.inject(ConfirmDateService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('getAllDates', () => {\n    it('should return an array of date confirmations', () => {\n      const mockDates = [mockDate];\n      service.getAllDates().subscribe(dates => {\n        expect(dates).toEqual(mockDates);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockDates);\n    });\n    it('should handle error when getting date confirmations', () => {\n      service.getAllDates().subscribe({\n        error: error => {\n          expect(error.status).toBe(500);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      req.error(new ErrorEvent('Server Error'), {\n        status: 500\n      });\n    });\n  });\n  describe('getDateById', () => {\n    it('should return a date confirmation by id', () => {\n      service.getDateById(1).subscribe(date => {\n        expect(date).toEqual(mockDate);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockDate);\n    });\n    it('should handle error when getting date confirmation by id', () => {\n      service.getDateById(999).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date/999`);\n      req.error(new ErrorEvent('Not Found'), {\n        status: 404\n      });\n    });\n  });\n  describe('createDate', () => {\n    it('should create a new date confirmation', () => {\n      service.createDate(mockCreateDateRequest).subscribe(response => {\n        expect(response).toEqual(mockDateResponse);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockCreateDateRequest);\n      req.flush(mockDateResponse);\n    });\n    it('should handle error when creating date confirmation', () => {\n      service.createDate(mockCreateDateRequest).subscribe({\n        error: error => {\n          expect(error.status).toBe(400);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      req.error(new ErrorEvent('Bad Request'), {\n        status: 400\n      });\n    });\n  });\n  describe('getDatesByPlayer', () => {\n    it('should return date confirmations for a player', () => {\n      const mockDates = [mockDate];\n      service.getDatesByPlayer(1).subscribe(dates => {\n        expect(dates).toEqual(mockDates);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date/player/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockDates);\n    });\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","ConfirmDateService","environment","describe","service","httpMock","mockDate","idDate","idMatch","idTeam","status","responseDate","notes","mockCreateDateRequest","mockDateResponse","message","dateId","beforeEach","configureTestingModule","imports","providers","inject","afterEach","verify","it","expect","toBeTruthy","mockDates","getAllDates","subscribe","dates","toEqual","req","expectOne","apiUrl","request","method","toBe","flush","error","ErrorEvent","getDateById","date","createDate","response","body","getDatesByPlayer"],"sources":["/Users/gs/Desktop/GS/DITELLA/ARQUITECTURA WEB/TP-Arquitectura-Web/frontend/tp-fulbo/src/app/features/dates/services/confirm-date.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { ConfirmDateService } from './confirm-date.service';\nimport { environment } from '../../../../environments/environment';\nimport { ConfirmDate, ConfirmDateRequest, ConfirmDateResponse } from '../../../models/confirm-date.model';\n\ndescribe('ConfirmDateService', () => {\n  let service: ConfirmDateService;\n  let httpMock: HttpTestingController;\n\n  const mockDate: ConfirmDate = {\n    idDate: 1,\n    idMatch: 1,\n    idTeam: 1,\n    status: 'PENDING',\n    responseDate: '2024-03-20T10:00:00',\n    notes: 'Test date confirmation'\n  };\n\n  const mockCreateDateRequest: ConfirmDateRequest = {\n    idMatch: 1,\n    idTeam: 1,\n    notes: 'New date confirmation'\n  };\n\n  const mockDateResponse: ConfirmDateResponse = {\n    message: 'Date confirmation created successfully',\n    dateId: 1\n  };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [ConfirmDateService]\n    });\n\n    service = TestBed.inject(ConfirmDateService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('getAllDates', () => {\n    it('should return an array of date confirmations', () => {\n      const mockDates: ConfirmDate[] = [mockDate];\n\n      service.getAllDates().subscribe(dates => {\n        expect(dates).toEqual(mockDates);\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockDates);\n    });\n\n    it('should handle error when getting date confirmations', () => {\n      service.getAllDates().subscribe({\n        error: (error) => {\n          expect(error.status).toBe(500);\n        }\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      req.error(new ErrorEvent('Server Error'), { status: 500 });\n    });\n  });\n\n  describe('getDateById', () => {\n    it('should return a date confirmation by id', () => {\n      service.getDateById(1).subscribe(date => {\n        expect(date).toEqual(mockDate);\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockDate);\n    });\n\n    it('should handle error when getting date confirmation by id', () => {\n      service.getDateById(999).subscribe({\n        error: (error) => {\n          expect(error.status).toBe(404);\n        }\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date/999`);\n      req.error(new ErrorEvent('Not Found'), { status: 404 });\n    });\n  });\n\n  describe('createDate', () => {\n    it('should create a new date confirmation', () => {\n      service.createDate(mockCreateDateRequest).subscribe(response => {\n        expect(response).toEqual(mockDateResponse);\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockCreateDateRequest);\n      req.flush(mockDateResponse);\n    });\n\n    it('should handle error when creating date confirmation', () => {\n      service.createDate(mockCreateDateRequest).subscribe({\n        error: (error) => {\n          expect(error.status).toBe(400);\n        }\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      req.error(new ErrorEvent('Bad Request'), { status: 400 });\n    });\n  });\n\n  describe('getDatesByPlayer', () => {\n    it('should return date confirmations for a player', () => {\n      const mockDates: ConfirmDate[] = [mockDate];\n\n      service.getDatesByPlayer(1).subscribe(dates => {\n        expect(dates).toEqual(mockDates);\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date/player/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockDates);\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}