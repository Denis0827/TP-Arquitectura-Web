{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { UserService } from './user.service';\nimport { ApiService } from './api.service';\ndescribe('UserService', () => {\n  let service;\n  let httpMock;\n  let apiService;\n  const mockPlayer = {\n    idUser: 1,\n    nombre: 'Juan',\n    apellido: 'Pérez',\n    fechaNacimiento: new Date('1990-01-01'),\n    mail: 'juan@example.com',\n    telefono: '123456789'\n  };\n  const mockCoach = {\n    ...mockPlayer\n    // Agregar propiedades específicas del coach si las hay\n  };\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [UserService, ApiService]\n    });\n    service = TestBed.inject(UserService);\n    httpMock = TestBed.inject(HttpTestingController);\n    apiService = TestBed.inject(ApiService);\n  });\n  afterEach(() => {\n    httpMock.verify(); // Verifica que no haya peticiones pendientes\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('Player Operations', () => {\n    it('should register a new player', () => {\n      const playerRequest = {\n        nombre: 'Juan',\n        apellido: 'Pérez',\n        fechaNacimiento: new Date('1990-01-01'),\n        mail: 'juan@example.com',\n        telefono: '123456789',\n        contraseña: 'password123'\n      };\n      const mockResponse = {\n        message: 'Jugador registrado exitosamente',\n        playerId: 1\n      };\n      service.registerPlayer(playerRequest).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n      const req = httpMock.expectOne('http://localhost:5088/api/user/register');\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(playerRequest);\n      req.flush(mockResponse);\n    });\n    it('should get all players', () => {\n      const mockPlayers = [mockPlayer];\n      service.getAllPlayers().subscribe(players => {\n        expect(players).toEqual(mockPlayers);\n      });\n      const req = httpMock.expectOne('http://localhost:5088/api/user/players');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockPlayers);\n    });\n    it('should get player by id', () => {\n      service.getPlayerById(1).subscribe(player => {\n        expect(player).toEqual(mockPlayer);\n      });\n      const req = httpMock.expectOne('http://localhost:5088/api/user/players/1');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockPlayer);\n    });\n    it('should delete player', () => {\n      const mockResponse = {\n        message: 'Player eliminado exitosamente'\n      };\n      service.deletePlayer(1).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n      const req = httpMock.expectOne('http://localhost:5088/api/user/players/1');\n      expect(req.request.method).toBe('DELETE');\n      req.flush(mockResponse);\n    });\n  });\n  describe('Coach Operations', () => {\n    it('should create coach from player', () => {\n      const mockResponse = {\n        message: 'Coach creado exitosamente'\n      };\n      service.createCoach(1).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n      const req = httpMock.expectOne('http://localhost:5088/api/user/players/1/coach');\n      expect(req.request.method).toBe('POST');\n      req.flush(mockResponse);\n    });\n    it('should get all coaches', () => {\n      const mockCoaches = [mockCoach];\n      service.getAllCoaches().subscribe(coaches => {\n        expect(coaches).toEqual(mockCoaches);\n      });\n      const req = httpMock.expectOne('http://localhost:5088/api/user/coaches');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockCoaches);\n    });\n    it('should get coach by id', () => {\n      service.getCoachById(1).subscribe(coach => {\n        expect(coach).toEqual(mockCoach);\n      });\n      const req = httpMock.expectOne('http://localhost:5088/api/user/coaches/1');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockCoach);\n    });\n    it('should delete coach', () => {\n      const mockResponse = {\n        message: 'Coach eliminado exitosamente'\n      };\n      service.deleteCoach(1).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n      const req = httpMock.expectOne('http://localhost:5088/api/user/coaches/1');\n      expect(req.request.method).toBe('DELETE');\n      req.flush(mockResponse);\n    });\n  });\n  describe('Authentication', () => {\n    it('should perform login', () => {\n      const loginRequest = {\n        mail: 'juan@example.com',\n        contraseña: 'password123'\n      };\n      const mockResponse = {\n        message: 'Login exitoso',\n        userType: 'player',\n        userId: 1\n      };\n      service.login(loginRequest).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n      const req = httpMock.expectOne('http://localhost:5088/api/user/login');\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(loginRequest);\n      req.flush(mockResponse);\n    });\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","UserService","ApiService","describe","service","httpMock","apiService","mockPlayer","idUser","nombre","apellido","fechaNacimiento","Date","mail","telefono","mockCoach","beforeEach","configureTestingModule","imports","providers","inject","afterEach","verify","it","expect","toBeTruthy","playerRequest","contraseña","mockResponse","message","playerId","registerPlayer","subscribe","response","toEqual","req","expectOne","request","method","toBe","body","flush","mockPlayers","getAllPlayers","players","getPlayerById","player","deletePlayer","createCoach","mockCoaches","getAllCoaches","coaches","getCoachById","coach","deleteCoach","loginRequest","userType","userId","login"],"sources":["/Users/gs/Desktop/GS/DITELLA/ARQUITECTURA WEB/TP-Arquitectura-Web/frontend/tp-fulbo/src/app/services/user.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { UserService, PlayerRequest, LoginRequest, Player, Coach, LoginResponse } from './user.service';\nimport { ApiService } from './api.service';\n\ndescribe('UserService', () => {\n  let service: UserService;\n  let httpMock: HttpTestingController;\n  let apiService: ApiService;\n\n  const mockPlayer: Player = {\n    idUser: 1,\n    nombre: 'Juan',\n    apellido: 'Pérez',\n    fechaNacimiento: new Date('1990-01-01'),\n    mail: 'juan@example.com',\n    telefono: '123456789'\n  };\n\n  const mockCoach: Coach = {\n    ...mockPlayer,\n    // Agregar propiedades específicas del coach si las hay\n  };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [UserService, ApiService]\n    });\n\n    service = TestBed.inject(UserService);\n    httpMock = TestBed.inject(HttpTestingController);\n    apiService = TestBed.inject(ApiService);\n  });\n\n  afterEach(() => {\n    httpMock.verify(); // Verifica que no haya peticiones pendientes\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('Player Operations', () => {\n    it('should register a new player', () => {\n      const playerRequest: PlayerRequest = {\n        nombre: 'Juan',\n        apellido: 'Pérez',\n        fechaNacimiento: new Date('1990-01-01'),\n        mail: 'juan@example.com',\n        telefono: '123456789',\n        contraseña: 'password123'\n      };\n\n      const mockResponse = { message: 'Jugador registrado exitosamente', playerId: 1 };\n\n      service.registerPlayer(playerRequest).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n\n      const req = httpMock.expectOne('http://localhost:5088/api/user/register');\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(playerRequest);\n      req.flush(mockResponse);\n    });\n\n    it('should get all players', () => {\n      const mockPlayers: Player[] = [mockPlayer];\n\n      service.getAllPlayers().subscribe(players => {\n        expect(players).toEqual(mockPlayers);\n      });\n\n      const req = httpMock.expectOne('http://localhost:5088/api/user/players');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockPlayers);\n    });\n\n    it('should get player by id', () => {\n      service.getPlayerById(1).subscribe(player => {\n        expect(player).toEqual(mockPlayer);\n      });\n\n      const req = httpMock.expectOne('http://localhost:5088/api/user/players/1');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockPlayer);\n    });\n\n    it('should delete player', () => {\n      const mockResponse = { message: 'Player eliminado exitosamente' };\n\n      service.deletePlayer(1).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n\n      const req = httpMock.expectOne('http://localhost:5088/api/user/players/1');\n      expect(req.request.method).toBe('DELETE');\n      req.flush(mockResponse);\n    });\n  });\n\n  describe('Coach Operations', () => {\n    it('should create coach from player', () => {\n      const mockResponse = { message: 'Coach creado exitosamente' };\n\n      service.createCoach(1).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n\n      const req = httpMock.expectOne('http://localhost:5088/api/user/players/1/coach');\n      expect(req.request.method).toBe('POST');\n      req.flush(mockResponse);\n    });\n\n    it('should get all coaches', () => {\n      const mockCoaches: Coach[] = [mockCoach];\n\n      service.getAllCoaches().subscribe(coaches => {\n        expect(coaches).toEqual(mockCoaches);\n      });\n\n      const req = httpMock.expectOne('http://localhost:5088/api/user/coaches');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockCoaches);\n    });\n\n    it('should get coach by id', () => {\n      service.getCoachById(1).subscribe(coach => {\n        expect(coach).toEqual(mockCoach);\n      });\n\n      const req = httpMock.expectOne('http://localhost:5088/api/user/coaches/1');\n      expect(req.request.method).toBe('GET');\n      req.flush(mockCoach);\n    });\n\n    it('should delete coach', () => {\n      const mockResponse = { message: 'Coach eliminado exitosamente' };\n\n      service.deleteCoach(1).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n\n      const req = httpMock.expectOne('http://localhost:5088/api/user/coaches/1');\n      expect(req.request.method).toBe('DELETE');\n      req.flush(mockResponse);\n    });\n  });\n\n  describe('Authentication', () => {\n    it('should perform login', () => {\n      const loginRequest: LoginRequest = {\n        mail: 'juan@example.com',\n        contraseña: 'password123'\n      };\n\n      const mockResponse: LoginResponse = {\n        message: 'Login exitoso',\n        userType: 'player',\n        userId: 1\n      };\n\n      service.login(loginRequest).subscribe(response => {\n        expect(response).toEqual(mockResponse);\n      });\n\n      const req = httpMock.expectOne('http://localhost:5088/api/user/login');\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(loginRequest);\n      req.flush(mockResponse);\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}