{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TeamService } from './team.service';\nimport { environment } from '../../../../environments/environment';\ndescribe('TeamService', () => {\n  let service;\n  let httpMock;\n  const mockTeam = {\n    id: 1,\n    name: 'Test Team',\n    description: 'Test Description',\n    coachId: 1,\n    players: []\n  };\n  const mockPlayer = {\n    id: 1,\n    firstName: 'John',\n    lastName: 'Doe',\n    position: 'Forward',\n    number: 10\n  };\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [TeamService]\n    });\n    service = TestBed.inject(TeamService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('getAllTeams', () => {\n    it('should return an array of teams', () => {\n      const mockTeams = [mockTeam];\n      service.getAllTeams().subscribe(teams => {\n        expect(teams).toEqual(mockTeams);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTeams);\n    });\n    it('should handle error when getting teams', () => {\n      service.getAllTeams().subscribe({\n        error: error => {\n          expect(error.status).toBe(500);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team`);\n      req.error(new ErrorEvent('Server Error'), {\n        status: 500\n      });\n    });\n  });\n  describe('getTeamById', () => {\n    it('should return a team by id', () => {\n      service.getTeamById(1).subscribe(team => {\n        expect(team).toEqual(mockTeam);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTeam);\n    });\n    it('should handle error when getting team by id', () => {\n      service.getTeamById(999).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team/999`);\n      req.error(new ErrorEvent('Not Found'), {\n        status: 404\n      });\n    });\n  });\n  describe('getTeamsByPlayer', () => {\n    it('should return teams for a player', () => {\n      const mockTeams = [mockTeam];\n      service.getTeamsByPlayer(1).subscribe(teams => {\n        expect(teams).toEqual(mockTeams);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team/players/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTeams);\n    });\n  });\n  describe('createTeam', () => {\n    it('should create a new team', () => {\n      const newTeam = {\n        name: 'New Team',\n        description: 'New Description',\n        coachId: 1\n      };\n      service.createTeam(newTeam).subscribe(team => {\n        expect(team).toEqual(mockTeam);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(newTeam);\n      req.flush(mockTeam);\n    });\n  });\n  describe('updateTeam', () => {\n    it('should update an existing team', () => {\n      const updateData = {\n        name: 'Updated Team',\n        description: 'Updated Description'\n      };\n      service.updateTeam(1, updateData).subscribe(team => {\n        expect(team).toEqual({\n          ...mockTeam,\n          ...updateData\n        });\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team/1`);\n      expect(req.request.method).toBe('PUT');\n      expect(req.request.body).toEqual(updateData);\n      req.flush({\n        ...mockTeam,\n        ...updateData\n      });\n    });\n  });\n  describe('deleteTeam', () => {\n    it('should delete a team', () => {\n      service.deleteTeam(1).subscribe(response => {\n        expect(response).toBeUndefined();\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team/1`);\n      expect(req.request.method).toBe('DELETE');\n      req.flush(null);\n    });\n  });\n  describe('player management', () => {\n    it('should add a player to team', () => {\n      service.addPlayerToTeam(1, mockPlayer).subscribe(team => {\n        expect(team.players).toContain(mockPlayer);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team/1/players`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockPlayer);\n      req.flush({\n        ...mockTeam,\n        players: [mockPlayer]\n      });\n    });\n    it('should remove a player from team', () => {\n      service.removePlayerFromTeam(1, 1).subscribe(team => {\n        expect(team.players).not.toContain(mockPlayer);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team/1/players/1`);\n      expect(req.request.method).toBe('DELETE');\n      req.flush({\n        ...mockTeam,\n        players: []\n      });\n    });\n    it('should update a player in team', () => {\n      const updatedPlayer = {\n        ...mockPlayer,\n        number: 11\n      };\n      service.updatePlayerInTeam(1, 1, updatedPlayer).subscribe(team => {\n        expect(team.players).toContain(updatedPlayer);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/team/1/players/1`);\n      expect(req.request.method).toBe('PUT');\n      expect(req.request.body).toEqual(updatedPlayer);\n      req.flush({\n        ...mockTeam,\n        players: [updatedPlayer]\n      });\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}