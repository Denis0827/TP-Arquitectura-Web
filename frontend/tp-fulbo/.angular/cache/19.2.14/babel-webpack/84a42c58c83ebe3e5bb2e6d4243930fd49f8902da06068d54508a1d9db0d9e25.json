{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nlet UserService = class UserService {\n  apiService;\n  constructor(apiService) {\n    this.apiService = apiService;\n  }\n  // Registro de jugador\n  registerPlayer(request) {\n    return this.apiService.post('/user/register', request);\n  }\n  // Login\n  login(request) {\n    return this.apiService.post('/user/login', request);\n  }\n  // Convertir jugador a coach\n  createCoach(playerId) {\n    return this.apiService.post(`/user/players/${playerId}/coach`, {});\n  }\n  // Obtener todos los coaches\n  getAllCoaches() {\n    return this.apiService.get('/user/coaches');\n  }\n  // Obtener coach por ID\n  getCoachById(idCoach) {\n    return this.apiService.get(`/user/coaches/${idCoach}`);\n  }\n  // Eliminar coach\n  deleteCoach(idCoach) {\n    return this.apiService.delete(`/user/coaches/${idCoach}`);\n  }\n  // Obtener todos los jugadores\n  getAllPlayers() {\n    return this.apiService.get('/user/players');\n  }\n  // Obtener jugador por ID\n  getPlayerById(idPlayer) {\n    return this.apiService.get(`/user/players/${idPlayer}`);\n  }\n  // Eliminar jugador\n  deletePlayer(idPlayer) {\n    return this.apiService.delete(`/user/players/${idPlayer}`);\n  }\n  static ctorParameters = () => [{\n    type: ApiService\n  }];\n};\nUserService = __decorate([Injectable({\n  providedIn: 'root'\n})], UserService);\nexport { UserService };","map":{"version":3,"names":["Injectable","ApiService","UserService","apiService","constructor","registerPlayer","request","post","login","createCoach","playerId","getAllCoaches","get","getCoachById","idCoach","deleteCoach","delete","getAllPlayers","getPlayerById","idPlayer","deletePlayer","__decorate","providedIn"],"sources":["/Users/gs/Desktop/GS/DITELLA/ARQUITECTURA WEB/TP-Arquitectura-Web/frontend/tp-fulbo/src/app/services/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ApiService } from './api.service';\nimport { Observable } from 'rxjs';\n\n// Interfaces para las peticiones\nexport interface PlayerRequest {\n  nombre: string;\n  apellido: string;\n  fechaNacimiento: Date;\n  mail: string;\n  telefono: string;\n  contraseña: string;\n}\n\nexport interface LoginRequest {\n  mail: string;\n  contraseña: string;\n}\n\n// Interfaces para las respuestas\nexport interface Player {\n  idUser: number;\n  nombre: string;\n  apellido: string;\n  fechaNacimiento: Date;\n  mail: string;\n  telefono: string;\n}\n\nexport interface Coach extends Player {\n  // Agrega propiedades específicas del coach si las hay\n}\n\nexport interface LoginResponse {\n  message: string;\n  userType: string;\n  userId: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  constructor(private apiService: ApiService) {}\n\n  // Registro de jugador\n  registerPlayer(request: PlayerRequest): Observable<{ message: string; playerId: number }> {\n    return this.apiService.post<{ message: string; playerId: number }>('/user/register', request);\n  }\n\n  // Login\n  login(request: LoginRequest): Observable<LoginResponse> {\n    return this.apiService.post<LoginResponse>('/user/login', request);\n  }\n\n  // Convertir jugador a coach\n  createCoach(playerId: number): Observable<{ message: string }> {\n    return this.apiService.post<{ message: string }>(`/user/players/${playerId}/coach`, {});\n  }\n\n  // Obtener todos los coaches\n  getAllCoaches(): Observable<Coach[]> {\n    return this.apiService.get<Coach[]>('/user/coaches');\n  }\n\n  // Obtener coach por ID\n  getCoachById(idCoach: number): Observable<Coach> {\n    return this.apiService.get<Coach>(`/user/coaches/${idCoach}`);\n  }\n\n  // Eliminar coach\n  deleteCoach(idCoach: number): Observable<{ message: string }> {\n    return this.apiService.delete<{ message: string }>(`/user/coaches/${idCoach}`);\n  }\n\n  // Obtener todos los jugadores\n  getAllPlayers(): Observable<Player[]> {\n    return this.apiService.get<Player[]>('/user/players');\n  }\n\n  // Obtener jugador por ID\n  getPlayerById(idPlayer: number): Observable<Player> {\n    return this.apiService.get<Player>(`/user/players/${idPlayer}`);\n  }\n\n  // Eliminar jugador\n  deletePlayer(idPlayer: number): Observable<{ message: string }> {\n    return this.apiService.delete<{ message: string }>(`/user/players/${idPlayer}`);\n  }\n} "],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,eAAe;AAyCnC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EACFC,UAAA;EAApBC,YAAoBD,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE7C;EACAE,cAAcA,CAACC,OAAsB;IACnC,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CAAwC,gBAAgB,EAAED,OAAO,CAAC;EAC/F;EAEA;EACAE,KAAKA,CAACF,OAAqB;IACzB,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CAAgB,aAAa,EAAED,OAAO,CAAC;EACpE;EAEA;EACAG,WAAWA,CAACC,QAAgB;IAC1B,OAAO,IAAI,CAACP,UAAU,CAACI,IAAI,CAAsB,iBAAiBG,QAAQ,QAAQ,EAAE,EAAE,CAAC;EACzF;EAEA;EACAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACR,UAAU,CAACS,GAAG,CAAU,eAAe,CAAC;EACtD;EAEA;EACAC,YAAYA,CAACC,OAAe;IAC1B,OAAO,IAAI,CAACX,UAAU,CAACS,GAAG,CAAQ,iBAAiBE,OAAO,EAAE,CAAC;EAC/D;EAEA;EACAC,WAAWA,CAACD,OAAe;IACzB,OAAO,IAAI,CAACX,UAAU,CAACa,MAAM,CAAsB,iBAAiBF,OAAO,EAAE,CAAC;EAChF;EAEA;EACAG,aAAaA,CAAA;IACX,OAAO,IAAI,CAACd,UAAU,CAACS,GAAG,CAAW,eAAe,CAAC;EACvD;EAEA;EACAM,aAAaA,CAACC,QAAgB;IAC5B,OAAO,IAAI,CAAChB,UAAU,CAACS,GAAG,CAAS,iBAAiBO,QAAQ,EAAE,CAAC;EACjE;EAEA;EACAC,YAAYA,CAACD,QAAgB;IAC3B,OAAO,IAAI,CAAChB,UAAU,CAACa,MAAM,CAAsB,iBAAiBG,QAAQ,EAAE,CAAC;EACjF;;;;;AA9CWjB,WAAW,GAAAmB,UAAA,EAHvBrB,UAAU,CAAC;EACVsB,UAAU,EAAE;CACb,CAAC,C,EACWpB,WAAW,CA+CvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}