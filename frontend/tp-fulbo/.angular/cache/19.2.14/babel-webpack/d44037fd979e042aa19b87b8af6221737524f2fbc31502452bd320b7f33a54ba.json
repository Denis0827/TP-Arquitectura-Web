{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TeamService } from './team.service';\nimport { environment } from '../../environments/environment';\ndescribe('TeamService', () => {\n  let service;\n  let httpMock;\n  const apiUrl = `${environment.apiUrl}/api/team`;\n  // Test data\n  const mockTeam = {\n    idTeam: 1,\n    nombre: 'Equipo Test'\n  };\n  const mockTeams = [mockTeam];\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [TeamService]\n    });\n    service = TestBed.inject(TeamService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify(); // Verifies that no requests are outstanding\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('getAllTeams', () => {\n    it('should get all teams successfully', () => {\n      service.getAllTeams().subscribe(teams => {\n        expect(teams).toEqual(mockTeams);\n      });\n      const req = httpMock.expectOne(`${apiUrl}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTeams);\n    });\n    it('should handle get teams error', () => {\n      const errorMessage = 'Error al obtener equipos';\n      service.getAllTeams().subscribe({\n        error: error => {\n          expect(error.status).toBe(500);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}`);\n      req.flush(errorMessage, {\n        status: 500,\n        statusText: 'Internal Server Error'\n      });\n    });\n  });\n  describe('getTeamById', () => {\n    it('should get a team by id successfully', () => {\n      const teamId = 1;\n      service.getTeamById(teamId).subscribe(team => {\n        expect(team).toEqual(mockTeam);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${teamId}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTeam);\n    });\n    it('should handle get team by id error', () => {\n      const teamId = 1;\n      const errorMessage = 'Equipo no encontrado';\n      service.getTeamById(teamId).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/${teamId}`);\n      req.flush(errorMessage, {\n        status: 404,\n        statusText: 'Not Found'\n      });\n    });\n  });\n  describe('getTeamsByPlayer', () => {\n    it('should get teams by player successfully', () => {\n      const playerId = 1;\n      service.getTeamsByPlayer(playerId).subscribe(teams => {\n        expect(teams).toEqual(mockTeams);\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTeams);\n    });\n    it('should handle get teams by player error', () => {\n      const playerId = 1;\n      const errorMessage = 'Error al obtener equipos del jugador';\n      service.getTeamsByPlayer(playerId).subscribe({\n        error: error => {\n          expect(error.status).toBe(500);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}`);\n      req.flush(errorMessage, {\n        status: 500,\n        statusText: 'Internal Server Error'\n      });\n    });\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","TeamService","environment","describe","service","httpMock","apiUrl","mockTeam","idTeam","nombre","mockTeams","beforeEach","configureTestingModule","imports","providers","inject","afterEach","verify","it","expect","toBeTruthy","getAllTeams","subscribe","teams","toEqual","req","expectOne","request","method","toBe","flush","errorMessage","error","status","statusText","teamId","getTeamById","team","playerId","getTeamsByPlayer"],"sources":["/Users/gs/Desktop/GS/DITELLA/ARQUITECTURA WEB/TP-Arquitectura-Web/frontend/tp-fulbo/src/app/features/teams/services/team.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TeamService } from './team.service';\nimport { environment } from '../../environments/environment';\nimport { Team } from '../models/team.model';\n\ndescribe('TeamService', () => {\n  let service: TeamService;\n  let httpMock: HttpTestingController;\n  const apiUrl = `${environment.apiUrl}/api/team`;\n\n  // Test data\n  const mockTeam: Team = {\n    idTeam: 1,\n    nombre: 'Equipo Test'\n  };\n\n  const mockTeams: Team[] = [mockTeam];\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [TeamService]\n    });\n\n    service = TestBed.inject(TeamService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify(); // Verifies that no requests are outstanding\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('getAllTeams', () => {\n    it('should get all teams successfully', () => {\n      service.getAllTeams().subscribe(teams => {\n        expect(teams).toEqual(mockTeams);\n      });\n\n      const req = httpMock.expectOne(`${apiUrl}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTeams);\n    });\n\n    it('should handle get teams error', () => {\n      const errorMessage = 'Error al obtener equipos';\n      \n      service.getAllTeams().subscribe({\n        error: (error) => {\n          expect(error.status).toBe(500);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n\n      const req = httpMock.expectOne(`${apiUrl}`);\n      req.flush(errorMessage, { status: 500, statusText: 'Internal Server Error' });\n    });\n  });\n\n  describe('getTeamById', () => {\n    it('should get a team by id successfully', () => {\n      const teamId = 1;\n      \n      service.getTeamById(teamId).subscribe(team => {\n        expect(team).toEqual(mockTeam);\n      });\n\n      const req = httpMock.expectOne(`${apiUrl}/${teamId}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTeam);\n    });\n\n    it('should handle get team by id error', () => {\n      const teamId = 1;\n      const errorMessage = 'Equipo no encontrado';\n      \n      service.getTeamById(teamId).subscribe({\n        error: (error) => {\n          expect(error.status).toBe(404);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n\n      const req = httpMock.expectOne(`${apiUrl}/${teamId}`);\n      req.flush(errorMessage, { status: 404, statusText: 'Not Found' });\n    });\n  });\n\n  describe('getTeamsByPlayer', () => {\n    it('should get teams by player successfully', () => {\n      const playerId = 1;\n      \n      service.getTeamsByPlayer(playerId).subscribe(teams => {\n        expect(teams).toEqual(mockTeams);\n      });\n\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockTeams);\n    });\n\n    it('should handle get teams by player error', () => {\n      const playerId = 1;\n      const errorMessage = 'Error al obtener equipos del jugador';\n      \n      service.getTeamsByPlayer(playerId).subscribe({\n        error: (error) => {\n          expect(error.status).toBe(500);\n          expect(error.error).toBe(errorMessage);\n        }\n      });\n\n      const req = httpMock.expectOne(`${apiUrl}/players/${playerId}`);\n      req.flush(errorMessage, { status: 500, statusText: 'Internal Server Error' });\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}