{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { ConfirmDateService } from './confirm-date.service';\nimport { environment } from '../../../../environments/environment';\ndescribe('ConfirmDateService', () => {\n  let service;\n  let httpMock;\n  const mockDate = {\n    idDate: 1,\n    idMatch: 1,\n    idTeam: 1,\n    status: 'PENDING',\n    responseDate: '2024-03-20T10:00:00',\n    notes: 'Test date confirmation'\n  };\n  const mockCreateDateRequest = {\n    idMatch: 1,\n    idTeam: 1,\n    notes: 'New date confirmation'\n  };\n  const mockDateResponse = {\n    message: 'Date confirmation created successfully',\n    dateId: 1\n  };\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [ConfirmDateService]\n    });\n    service = TestBed.inject(ConfirmDateService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('getAllDates', () => {\n    it('should return an array of date confirmations', () => {\n      const mockDates = [mockDate];\n      service.getAllDates().subscribe(dates => {\n        expect(dates).toEqual(mockDates);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockDates);\n    });\n    it('should handle error when getting date confirmations', () => {\n      service.getAllDates().subscribe({\n        error: error => {\n          expect(error.status).toBe(500);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      req.error(new ErrorEvent('Server Error'), {\n        status: 500\n      });\n    });\n  });\n  describe('getDateById', () => {\n    it('should return a date confirmation by id', () => {\n      service.getDateById(1).subscribe(date => {\n        expect(date).toEqual(mockDate);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockDate);\n    });\n    it('should handle error when getting date confirmation by id', () => {\n      service.getDateById(999).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date/999`);\n      req.error(new ErrorEvent('Not Found'), {\n        status: 404\n      });\n    });\n  });\n  describe('createDate', () => {\n    it('should create a new date confirmation', () => {\n      service.createDate(mockCreateDateRequest).subscribe(response => {\n        expect(response).toEqual(mockDateResponse);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockCreateDateRequest);\n      req.flush(mockDateResponse);\n    });\n    it('should handle error when creating date confirmation', () => {\n      service.createDate(mockCreateDateRequest).subscribe({\n        error: error => {\n          expect(error.status).toBe(400);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date`);\n      req.error(new ErrorEvent('Bad Request'), {\n        status: 400\n      });\n    });\n  });\n  describe('getDatesByPlayer', () => {\n    it('should return date confirmations for a player', () => {\n      const mockDates = [mockDate];\n      service.getDatesByPlayer(1).subscribe(dates => {\n        expect(dates).toEqual(mockDates);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/confirm-date/player/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockDates);\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}