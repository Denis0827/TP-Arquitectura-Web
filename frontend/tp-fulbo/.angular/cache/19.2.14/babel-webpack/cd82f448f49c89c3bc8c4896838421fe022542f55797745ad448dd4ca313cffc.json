{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { MatchService } from './match.service';\nimport { environment } from '../../../../environments/environment';\ndescribe('MatchService', () => {\n  let service;\n  let httpMock;\n  const mockMatch = {\n    idMatch: 1,\n    idTeamA: 1,\n    idTeamB: 2,\n    idDate: 1,\n    status: 'SCHEDULED',\n    scoreTeamA: 0,\n    scoreTeamB: 0,\n    notes: 'Test match'\n  };\n  const mockCreateMatchRequest = {\n    idTeamA: 1,\n    idTeamB: 2,\n    idDate: 1,\n    notes: 'New match'\n  };\n  const mockMatchResponse = {\n    message: 'Match created successfully',\n    matchId: 1\n  };\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [MatchService]\n    });\n    service = TestBed.inject(MatchService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('getAllMatches', () => {\n    it('should return an array of matches', () => {\n      const mockMatches = [mockMatch];\n      service.getAllMatches().subscribe(matches => {\n        expect(matches).toEqual(mockMatches);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatches);\n    });\n    it('should handle error when getting matches', () => {\n      service.getAllMatches().subscribe({\n        error: error => {\n          expect(error.status).toBe(500);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      req.error(new ErrorEvent('Server Error'), {\n        status: 500\n      });\n    });\n  });\n  describe('getMatchById', () => {\n    it('should return a match by id', () => {\n      service.getMatchById(1).subscribe(match => {\n        expect(match).toEqual(mockMatch);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatch);\n    });\n    it('should handle error when getting match by id', () => {\n      service.getMatchById(999).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/999`);\n      req.error(new ErrorEvent('Not Found'), {\n        status: 404\n      });\n    });\n  });\n  describe('createMatch', () => {\n    it('should create a new match', () => {\n      service.createMatch(mockCreateMatchRequest).subscribe(response => {\n        expect(response).toEqual(mockMatchResponse);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockCreateMatchRequest);\n      req.flush(mockMatchResponse);\n    });\n    it('should handle error when creating match', () => {\n      service.createMatch(mockCreateMatchRequest).subscribe({\n        error: error => {\n          expect(error.status).toBe(400);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      req.error(new ErrorEvent('Bad Request'), {\n        status: 400\n      });\n    });\n  });\n  describe('getMatchesByTeam', () => {\n    it('should return matches for a team', () => {\n      const mockMatches = [mockMatch];\n      service.getMatchesByTeam(1).subscribe(matches => {\n        expect(matches).toEqual(mockMatches);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/team/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatches);\n    });\n  });\n  describe('getMatchesByDate', () => {\n    it('should return matches for a date', () => {\n      const mockMatches = [mockMatch];\n      service.getMatchesByDate(1).subscribe(matches => {\n        expect(matches).toEqual(mockMatches);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/date/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatches);\n    });\n  });\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","MatchService","environment","describe","service","httpMock","mockMatch","idMatch","idTeamA","idTeamB","idDate","status","scoreTeamA","scoreTeamB","notes","mockCreateMatchRequest","mockMatchResponse","message","matchId","beforeEach","configureTestingModule","imports","providers","inject","afterEach","verify","it","expect","toBeTruthy","mockMatches","getAllMatches","subscribe","matches","toEqual","req","expectOne","apiUrl","request","method","toBe","flush","error","ErrorEvent","getMatchById","match","createMatch","response","body","getMatchesByTeam","getMatchesByDate"],"sources":["/Users/gs/Desktop/GS/DITELLA/ARQUITECTURA WEB/TP-Arquitectura-Web/frontend/tp-fulbo/src/app/features/matches/services/match.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { MatchService } from './match.service';\nimport { environment } from '../../../../environments/environment';\nimport { Match, CreateMatchRequest, MatchResponse } from '../../../models/rematch.model';\n\ndescribe('MatchService', () => {\n  let service: MatchService;\n  let httpMock: HttpTestingController;\n\n  const mockMatch: Match = {\n    idMatch: 1,\n    idTeamA: 1,\n    idTeamB: 2,\n    idDate: 1,\n    status: 'SCHEDULED',\n    scoreTeamA: 0,\n    scoreTeamB: 0,\n    notes: 'Test match'\n  };\n\n  const mockCreateMatchRequest: CreateMatchRequest = {\n    idTeamA: 1,\n    idTeamB: 2,\n    idDate: 1,\n    notes: 'New match'\n  };\n\n  const mockMatchResponse: MatchResponse = {\n    message: 'Match created successfully',\n    matchId: 1\n  };\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [MatchService]\n    });\n\n    service = TestBed.inject(MatchService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('getAllMatches', () => {\n    it('should return an array of matches', () => {\n      const mockMatches: Match[] = [mockMatch];\n\n      service.getAllMatches().subscribe(matches => {\n        expect(matches).toEqual(mockMatches);\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatches);\n    });\n\n    it('should handle error when getting matches', () => {\n      service.getAllMatches().subscribe({\n        error: (error) => {\n          expect(error.status).toBe(500);\n        }\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      req.error(new ErrorEvent('Server Error'), { status: 500 });\n    });\n  });\n\n  describe('getMatchById', () => {\n    it('should return a match by id', () => {\n      service.getMatchById(1).subscribe(match => {\n        expect(match).toEqual(mockMatch);\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatch);\n    });\n\n    it('should handle error when getting match by id', () => {\n      service.getMatchById(999).subscribe({\n        error: (error) => {\n          expect(error.status).toBe(404);\n        }\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/999`);\n      req.error(new ErrorEvent('Not Found'), { status: 404 });\n    });\n  });\n\n  describe('createMatch', () => {\n    it('should create a new match', () => {\n      service.createMatch(mockCreateMatchRequest).subscribe(response => {\n        expect(response).toEqual(mockMatchResponse);\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockCreateMatchRequest);\n      req.flush(mockMatchResponse);\n    });\n\n    it('should handle error when creating match', () => {\n      service.createMatch(mockCreateMatchRequest).subscribe({\n        error: (error) => {\n          expect(error.status).toBe(400);\n        }\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      req.error(new ErrorEvent('Bad Request'), { status: 400 });\n    });\n  });\n\n  describe('getMatchesByTeam', () => {\n    it('should return matches for a team', () => {\n      const mockMatches: Match[] = [mockMatch];\n\n      service.getMatchesByTeam(1).subscribe(matches => {\n        expect(matches).toEqual(mockMatches);\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/team/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatches);\n    });\n  });\n\n  describe('getMatchesByDate', () => {\n    it('should return matches for a date', () => {\n      const mockMatches: Match[] = [mockMatch];\n\n      service.getMatchesByDate(1).subscribe(matches => {\n        expect(matches).toEqual(mockMatches);\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/date/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatches);\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}