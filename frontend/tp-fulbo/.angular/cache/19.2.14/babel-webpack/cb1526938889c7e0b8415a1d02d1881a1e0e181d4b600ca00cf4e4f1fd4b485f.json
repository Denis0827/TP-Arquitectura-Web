{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { MatchService } from './match.service';\nimport { environment } from '../../../../environments/environment';\ndescribe('MatchService', () => {\n  let service;\n  let httpMock;\n  const mockMatch = {\n    idMatch: 1,\n    idTeamA: 1,\n    idTeamB: 2,\n    idDate: 1,\n    status: 'SCHEDULED',\n    scoreTeamA: 0,\n    scoreTeamB: 0,\n    notes: 'Test match'\n  };\n  const mockCreateMatchRequest = {\n    idTeamA: 1,\n    idTeamB: 2,\n    idDate: 1,\n    notes: 'New match'\n  };\n  const mockMatchResponse = {\n    message: 'Match created successfully',\n    matchId: 1\n  };\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [MatchService]\n    });\n    service = TestBed.inject(MatchService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('getAllMatches', () => {\n    it('should return an array of matches', () => {\n      const mockMatches = [mockMatch];\n      service.getAllMatches().subscribe(matches => {\n        expect(matches).toEqual(mockMatches);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatches);\n    });\n    it('should handle error when getting matches', () => {\n      service.getAllMatches().subscribe({\n        error: error => {\n          expect(error.status).toBe(500);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      req.error(new ErrorEvent('Server Error'), {\n        status: 500\n      });\n    });\n  });\n  describe('getMatchById', () => {\n    it('should return a match by id', () => {\n      service.getMatchById(1).subscribe(match => {\n        expect(match).toEqual(mockMatch);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatch);\n    });\n    it('should handle error when getting match by id', () => {\n      service.getMatchById(999).subscribe({\n        error: error => {\n          expect(error.status).toBe(404);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/999`);\n      req.error(new ErrorEvent('Not Found'), {\n        status: 404\n      });\n    });\n  });\n  describe('createMatch', () => {\n    it('should create a new match', () => {\n      service.createMatch(mockCreateMatchRequest).subscribe(response => {\n        expect(response).toEqual(mockMatchResponse);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(mockCreateMatchRequest);\n      req.flush(mockMatchResponse);\n    });\n    it('should handle error when creating match', () => {\n      service.createMatch(mockCreateMatchRequest).subscribe({\n        error: error => {\n          expect(error.status).toBe(400);\n        }\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match`);\n      req.error(new ErrorEvent('Bad Request'), {\n        status: 400\n      });\n    });\n  });\n  describe('getMatchesByTeam', () => {\n    it('should return matches for a team', () => {\n      const mockMatches = [mockMatch];\n      service.getMatchesByTeam(1).subscribe(matches => {\n        expect(matches).toEqual(mockMatches);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/team/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatches);\n    });\n  });\n  describe('getMatchesByDate', () => {\n    it('should return matches for a date', () => {\n      const mockMatches = [mockMatch];\n      service.getMatchesByDate(1).subscribe(matches => {\n        expect(matches).toEqual(mockMatches);\n      });\n      const req = httpMock.expectOne(`${environment.apiUrl}/api/match/date/1`);\n      expect(req.request.method).toBe('GET');\n      req.flush(mockMatches);\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}